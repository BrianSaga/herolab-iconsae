<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- Form for adding AOEs to skills.
-->

<document signature="Hero Lab Data">

   <portal
    id="bonExtra"
    style="tblNormal">
    <table_dynamic
      component="Extra"
      showtemplate="bonPick"
      choosetemplate="SimpleItem"
      showfixedlast="yes"
	  candidatepick="PowerInfo"
	  candidatefield="powTagExp"
	  headerpick="PowerInfo"
	  choosesortset="ExLimSort"
	  addpick="PowerInfo">
      <titlebar><![CDATA[
        @text = "Extras - " & parent.field[name].text
        ]]></titlebar>
      <description/>
      <headertitle><![CDATA[
         @text = "Extras"
        ]]></headertitle>
	  <additem><![CDATA[
        @text = "Add Extra"
        ]]></additem>
      </table_dynamic>
    </portal>

	<portal
    id="limLimit"
    style="tblNormal">
    <table_dynamic
      component="Limit"
      showtemplate="limPick"
      choosetemplate="SimpleItem"
      showfixedlast="yes"
	  candidatepick="PowerInfo"
	  candidatefield="powTagExp"
	  headerpick="PowerInfo"
	  choosesortset="ExLimSort"
	  addpick="PowerInfo">
      <titlebar><![CDATA[
        @text = "Limit - " & parent.field[name].text
        ]]></titlebar>
      <description/>
      <headertitle><![CDATA[
         @text = "Limit"
        ]]></headertitle>
	  <additem><![CDATA[
        @text = "Add Limit"
        ]]></additem>
      </table_dynamic>
    </portal>


  <!-- Title template -->
  <template
    id="optOptions"
    name="Options"
    compset="PowerInfo">
	
 	<portal
	  id="powopt1"
	  style="chsNormal"
	  width="210">
	<chooser_table
      component="PowerOpt"
	  choosetemplate="SimpleItem"
	  candidatepick="PowerInfo"
	  candidatefield="powOptExp1">
	  <autotag group="PowerInfo" tag="Option"/>
    <chosen><![CDATA[
      if (@ispick = 0) then
        @text = "{text ff0000}Select an option"
      else
        @text = "Option: " & field[name].text
        endif
      ]]></chosen>
    <titlebar>
      @text = "Choose an option"
      </titlebar>
    </chooser_table>
  </portal>	
  
  <portal
	  id="powopt2"
	  style="chsNormal"
	  width="210">
	<chooser_table
      component="PowerOpt"
	  choosetemplate="SimpleItem"
	  candidatepick="PowerInfo"
	  candidatefield="powOptExp2">
	  <autotag group="PowerInfo" tag="Option"/>
    <chosen><![CDATA[
      if (@ispick = 0) then
        @text = "{text ff0000}Select an option"
      else
        @text = "Option: " & field[name].text
        endif
      ]]></chosen>
    <titlebar>
      @text = "Choose an option"
      </titlebar>
    </chooser_table>
  </portal>  
  
  <portal
	  id="powopt3"
	  style="chsNormal"
	  width="210">
	<chooser_table
      component="PowerOpt"
	  choosetemplate="SimpleItem"
	  candidatepick="PowerInfo"
	  candidatefield="powOptExp3">
	  <autotag group="PowerInfo" tag="Option"/>
    <chosen><![CDATA[
      if (@ispick = 0) then
        @text = "{text ff0000}Select an option"
      else
        @text = "Option: " & field[name].text
        endif
      ]]></chosen>
    <titlebar>
      @text = "Choose an option"
      </titlebar>
    </chooser_table>
  </portal>

	<portal
	  id="powsource"
	  style="chsNormal"
	  width="150">
	<chooser_table
      component="PowerSrc"
	  choosetemplate="SimpleItem">
	  <autotag group="PowerInfo" tag="Source"/>
    <chosen><![CDATA[
      if (@ispick = 0) then
        @text = "{text ff0000}Select a power source"
      else
        @text = "Source: " & field[name].text
        endif
      ]]></chosen>
    <titlebar>
      @text = "Choose a power source"
      </titlebar>
    </chooser_table>
  </portal>	 
  <position><![CDATA[
   
      ~all tables span the full width
      portal[powsource].width = 250
      portal[powopt1].width = 250
      portal[powopt2].width = 250
      portal[powopt3].width = 250
  

      perform portal[powsource].alignedge[left,5]

      portal[powopt1].visible = 0
      if (field[powOptExp1].isempty = 0) then
        portal[powopt1].visible = 1
        perform portal[powopt1].alignedge[left,5]
        perform portal[powopt1].alignrel[ttob,powsource,10]
        endif

	  portal[powopt2].visible = 0
      if (field[powOptExp2].isempty = 0) then
        portal[powopt2].visible = 1
        perform portal[powopt2].alignedge[left,5]
        perform portal[powopt2].alignrel[ttob,powopt1,10]
        endif

	  portal[powopt3].visible = 0
      if (field[powOptExp3].isempty = 0) then
        portal[powopt3].visible = 1
        perform portal[powopt3].alignedge[left,5]
        perform portal[powopt3].alignrel[ttob,powopt2,10]
        endif

      ]]></position>
    </template>	
	
	
  <!-- Title template -->
  <template
    id="piTitle"
    name="Title"
    compset="PowerInfo">

	 <portal
      id="name"
      style="lblLeft"
      showinvalid="yes">
      <label>
		<labeltext><![CDATA[
         @text = "{size 50}" & parent.field[thingname].text
        ]]></labeltext>
		</label>
      </portal>

	 <portal
      id="lbltitle"
      style="lblNormal"
      showinvalid="yes">
      <label>
		<labeltext><![CDATA[
         @text = "Name: "
        ]]></labeltext>
		</label>
      </portal>

    <portal
      id="value"
      style="incrBig">
      <incrementer
        field="trtUser">
        </incrementer>
      <mouseinfo><![CDATA[
        if (hero.tagis[mode.creation] = 0) then
          @text = "Powers must be modified via the Advances tab once the character is locked for play."
        elseif (autonomous = 0) then
          @text = "This trait has been improved via the Advances tab and cannot be modified further from here."
        else
          @text = "Allocate points to this power by clicking on the arrows to increase/decrease the number of points assigned."
          endif
        ]]></mouseinfo>
      </portal>

	  <portal
      id="total"
      style="lblXLarge"
      showinvalid="yes">
      <label>
		<labeltext><![CDATA[
        var score as number
		var ratedlevel as string
		score = field[trtFinal].value
		Call RatedLevel
		@text = ratedlevel
		]]></labeltext>
	  </label>
      </portal> 
	  
    <portal
      id="title"
		style="editNormal">
		<edit	
			field="UserName"/>
      </portal>
	  
    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>

    <portal
      id="lblmenu2"
      style="lblSecond">
      <label
        field="usrLabel2">
        </label>
      </portal>

    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>

    <portal
      id="menu2"
      style="menuNormal">
      <menu_things
        field="usrChosen2"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource2"
        candidatefield="usrCandid2">
        </menu_things>
      </portal>

    <portal
      id="notes"
      style="actNotesSm"
      tiptext="Click here to edit the notes for this power.">
      <action
        action="notes"
        field="powNotes">
        </action>
      </portal>

    <portal
      id="checkbox"
      style="chkNormal">
      <checkbox
        field="usrIsCheck"
        dynamicfield="usrChkText">
        </checkbox>
      </portal>

    <portal
      id="domain"
      style="editNormal">
      <edit
        field="domDomain"
		placeholdertext="Details...">
        </edit>
      </portal>	 

	  
    <position><![CDATA[
      ~set up our width and height
      height = 40
	  width = 640
	  
      doneif (issizing <> 0)

	  portal[name].left = 5
	  portal[name].top = 5
	  portal[lbltitle].top = 5
	  portal[title].top = 5
	  portal[value].top = 5
	  perform portal[total].centeron[vert,value]
	  
	  portal[title].width = 160

      perform portal[lbltitle].alignrel[ltor,name,50]
      perform portal[title].alignrel[ltor,lbltitle,5]
      perform portal[notes].alignrel[ltor,title,15]
      perform portal[notes].centeron[vert,title]
      
	  perform portal[value].alignedge[right,-5]
      perform portal[total].alignrel[rtol,value,-10]
	  
	  perform portal[lblmenu1].alignrel[ttob,name,15]
      perform portal[menu1].centeron[vert,lblmenu1]
      perform portal[lblmenu2].centeron[vert,lblmenu1]
      perform portal[menu2].centeron[vert,lblmenu1]
  
      perform portal[checkbox].centeron[vert,lblmenu1]
      perform portal[domain].centeron[vert,lblmenu1]

      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.
	  
      if (field[usrCandid1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        portal[menu1].visible = 0
      elseif (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif
      if (field[usrCandid2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        portal[menu2].visible = 0
      elseif (field[usrLabel2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        endif
 
      if (field[usrChkText].isempty <> 0) then
        portal[checkbox].visible = 0
        endif

  

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = width

      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 200
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      if (portal[checkbox].visible <> 0) then
        reserve = defwidth

      elseif (portal[menu1].visible <> 0) then
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap
        reserve += portal[lblmenu2].width * portal[menu2].visible
        reserve += (defwidth + gap) * portal[menu2].visible
        endif

      ~position the name on the left, reserving our minimum space for any portals
      var x as number
      x = 0

      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
      maxwidth = 200
	  
      ~setup the maximum width for our some portals, regardless of space available

	  if (tagis[User.NeedDomain] <> 0) then
		maxwidth -= 90
	  endif
	  
	  ~if we don't need a domain, hide it
      if (tagis[User.NeedDomain] = 0) then
        portal[domain].visible = 0	
	        ~otherwise, position the domain portals next to the TL
			~RDS altered to make the name portal invivisible and shift the domain to the name position 
			~    to use it as a custom Skill name when a Custom Skill is chosen
      else
		portal[domain].left = x 
		portal[domain].width = minimum(maxwidth,edge - portal[domain].left - 5)	
        x = portal[domain].right + 4		
	  endif			
		
	  
      ~if we have a checkbox, size and position it appropriately
      if (portal[checkbox].visible <> 0) then
        portal[checkbox].left = x
		endif

      ~if we have one thing-based menu, size and position it appropriately
      if (portal[menu1].visible + portal[menu2].visible = 1) then
        if (portal[lblmenu1].visible <> 0) then
			debug x
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        portal[menu1].width = minimum(edge - portal[menu1].left,maxwidth)
        x = portal[menu1].right + 4		
      ~if we have two thing-based menus, size and position them appropriately
      elseif (portal[menu1].visible <> 0) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenu2].visible <> 0) then
          portal[lblmenu2].left = x
          x = portal[lblmenu2].right + 4
          endif
        portal[menu2].left = x
        endif


      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuError]
          endif
        endif
      if (portal[menu2].visible <> 0) then
        if (field[usrChosen2].ischosen = 0) then
          perform portal[menu2].setstyle[menuError]
          endif
        endif


      ]]></position>
    </template>

  <!-- bonPick template
        Displays the name of the pick/thing and an info button with the basic
        description text. This is basically the "SimpleItem" template, with one
        key difference. Auto-added abilities such as those conferred by races are
        sorted and colored differently to distinguish their nature.
  -->
  <template
    id="bonPick"
    name="Extra Pick"
    compset="Extra"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="thingname">
        </label>
      </portal>

    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>

    <portal
      id="lblmenu2"
      style="lblSecond">
      <label
        field="usrLabel2">
        </label>
      </portal>

    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>

    <portal
      id="menu2"
      style="menuNormal">
      <menu_things
        field="usrChosen2"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource2"
        candidatefield="usrCandid2">
        </menu_things>
      </portal>

    <portal
      id="lblmenuar"
      style="lblSecond">
      <label
        field="usrLabelAr">
        </label>
      </portal>

    <portal
      id="menuarray"
      style="menuNormal">
      <menu_array
        field="usrSelect"
        array="usrArray"
        maxvisible="10">
        </menu_array>
      </portal>

    <portal
      id="checkbox"
      style="chkNormal">
      <checkbox
        field="usrIsCheck"
        dynamicfield="usrChkText">
        </checkbox>
      </portal>

    <portal
      id="domain"
      style="editNormal">
      <edit
        field="domDomain"
		placeholdertext="Details">
        </edit>
      </portal>	

	<portal
      id="username"
      style="editNormal">
      <edit
        field="UserName"
		placeholdertext="Enter custom modifier">
        </edit>
      </portal>	
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0
	  
      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[lblmenu1].centervert
      perform portal[menu1].centervert
      perform portal[lblmenu2].centervert
      perform portal[menu2].centervert
      perform portal[lblmenuar].centervert
      perform portal[menuarray].centervert
      perform portal[checkbox].centervert
      perform portal[domain].centervert	 	  
      perform portal[username].centervert	 	  

      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.

      if (field[usrCandid1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        portal[menu1].visible = 0
      elseif (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif
      if (field[usrCandid2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        portal[menu2].visible = 0
      elseif (field[usrLabel2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        endif
      if (empty(field[usrArray].arraytext[0]) <> 0) then
        portal[lblmenuar].visible = 0
        portal[menuarray].visible = 0
      elseif (field[usrLabelAr].isempty <> 0) then
        portal[lblmenuar].visible = 0
        endif
      if (field[usrChkText].isempty <> 0) then
        portal[checkbox].visible = 0
        endif	  
	  
      ~position the delete portal on the far right and the info portal next to it
      perform portal[delete].alignedge[right,0]
      perform portal[info].alignrel[rtol,delete,-8]

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = portal[info].left - 5
	  
      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 100
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      if (portal[checkbox].visible <> 0) then
        reserve = defwidth
      elseif (portal[menuarray].visible <> 0) then
        reserve = portal[lblmenuar].width * portal[lblmenuar].visible
        reserve += defwidth + gap
      elseif (portal[menu1].visible <> 0) then
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap
        reserve += portal[lblmenu2].width * portal[menu2].visible
        reserve += (defwidth + gap) * portal[menu2].visible
        endif

      ~position the name on the left, reserving our minimum space for any portals
      var x as number
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge - portal[name].left - reserve)
      x = portal[name].right + gap

	  ~if we're a custom item, show the edit portal over the name
	  if (tagis[Helper.CustomItem] <> 0) then
		portal[username].left = portal[name].left
		portal[username].width = minimum(180,edge - portal[name].left - reserve)
		portal[name].visible = 0
	  else
		portal[username].visible = 0
	  endif
	  
      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
	  maxwidth = 190
	  if (tagis[User.NeedDomain] <> 0) then
		maxwidth -= 90
	  endif
      
	  ~if we have a checkbox, size and position it appropriately
      if (portal[checkbox].visible <> 0) then
        portal[checkbox].left = x
		x = portal[checkbox].right + 4
      ~if we have a thing-based menu and an array-based menu, size and position them appropriately
      elseif (portal[menu1].visible + portal[menuarray].visible > 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
		x = portal[menuarray].right + 4		
      ~if we have an array-based menu, size and position it appropriately
      elseif (portal[menuarray].visible <> 0) then
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
        portal[menuarray].width = maxwidth
		x = portal[menuarray].right + 4
      ~if we have one thing-based menu, size and position it appropriately
      elseif (portal[menu1].visible + portal[menu2].visible = 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        portal[menu1].width = minimum(edge - portal[menu1].left,maxwidth)
		x = portal[menu1].right + 4
      ~if we have two thing-based menus, size and position them appropriately
      elseif (portal[menu1].visible <> 0) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenu2].visible <> 0) then
          portal[lblmenu2].left = x
          x = portal[lblmenu2].right + 4
          endif
        portal[menu2].left = x
		x = portal[menu2].right + 4
        endif

	  ~if we don't need a domain, hide it
      if (tagis[User.NeedDomain] = 0) then
        portal[domain].visible = 0	
	        ~otherwise, position the domain portals next to the TL
			~RDS altered to make the name portal invivisible and shift the domain to the name position 
			~    to use it as a custom Skill name when a Custom Skill is chosen
      else
		portal[domain].left = x 
		portal[domain].width = minimum(190,portal[info].left - portal[domain].left - 5)		 
	  endif			
		
      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuError]
          endif
        endif
      if (portal[menu2].visible <> 0) then
        if (field[usrChosen2].ischosen = 0) then
          perform portal[menu2].setstyle[menuError]
          endif
        endif
      if (portal[menuarray].visible <> 0) then
        if (field[usrSelect].isempty <> 0) then
          perform portal[menuarray].setstyle[menuError]
          endif
        endif
      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>

	<!-- limPick template
        Displays the name of the pick/thing and an info button with the basic
        description text. This is basically the "SimpleItem" template, with one
        key difference. Auto-added abilities such as those conferred by races are
        sorted and colored differently to distinguish their nature.
  -->
  <template
    id="limPick"
    name="Limit Pick"
    compset="Limit"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="thingname">
        </label>
      </portal>

    <portal
      id="lblmenu1"
      style="lblSecond">
      <label
        field="usrLabel1">
        </label>
      </portal>

    <portal
      id="lblmenu2"
      style="lblSecond">
      <label
        field="usrLabel2">
        </label>
      </portal>

    <portal
      id="menu1"
      style="menuNormal">
      <menu_things
        field="usrChosen1"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource1"
        candidatefield="usrCandid1">
        </menu_things>
      </portal>

    <portal
      id="menu2"
      style="menuNormal">
      <menu_things
        field="usrChosen2"
        component="none"
        maxvisible="10"
        usepicksfield="usrSource2"
        candidatefield="usrCandid2">
        </menu_things>
      </portal>

    <portal
      id="lblmenuar"
      style="lblSecond">
      <label
        field="usrLabelAr">
        </label>
      </portal>

    <portal
      id="menuarray"
      style="menuNormal">
      <menu_array
        field="usrSelect"
        array="usrArray"
        maxvisible="10">
        </menu_array>
      </portal>

    <portal
      id="checkbox"
      style="chkNormal">
      <checkbox
        field="usrIsCheck"
        dynamicfield="usrChkText">
        </checkbox>
      </portal>

    <portal
      id="domain"
      style="editNormal">
      <edit
        field="domDomain"
		placeholdertext="Details">
        </edit>
      </portal>	

	<portal
      id="username"
      style="editNormal">
      <edit
        field="UserName"
		placeholdertext="Enter custom modifier">
        </edit>
      </portal>	
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0
	  
      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[lblmenu1].centervert
      perform portal[menu1].centervert
      perform portal[lblmenu2].centervert
      perform portal[menu2].centervert
      perform portal[lblmenuar].centervert
      perform portal[menuarray].centervert
      perform portal[checkbox].centervert
      perform portal[domain].centervert	 	  
      perform portal[username].centervert	 	  

      ~determine whether our portals are visible; we only show them if requested
      ~Note: Remember that a non-empty tagexpr field indicates menu selection is used.

      if (field[usrCandid1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        portal[menu1].visible = 0
      elseif (field[usrLabel1].isempty <> 0) then
        portal[lblmenu1].visible = 0
        endif
      if (field[usrCandid2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        portal[menu2].visible = 0
      elseif (field[usrLabel2].isempty <> 0) then
        portal[lblmenu2].visible = 0
        endif
      if (empty(field[usrArray].arraytext[0]) <> 0) then
        portal[lblmenuar].visible = 0
        portal[menuarray].visible = 0
      elseif (field[usrLabelAr].isempty <> 0) then
        portal[lblmenuar].visible = 0
        endif
      if (field[usrChkText].isempty <> 0) then
        portal[checkbox].visible = 0
        endif	  
	  
      ~position the delete portal on the far right and the info portal next to it
      perform portal[delete].alignedge[right,0]
      perform portal[info].alignrel[rtol,delete,-8]

      ~determine our effective right edge, allowing for the buttons above
      var edge as number
      edge = portal[info].left - 5
	  
      ~setup the default portal width and gap to be used between and around portals
      var defwidth as number
      var gap as number
      defwidth = 100
      gap = 10

      ~determine the minimum amount of space we need to reserve for our portals
      var reserve as number
      if (portal[checkbox].visible <> 0) then
        reserve = defwidth
      elseif (portal[menuarray].visible <> 0) then
        reserve = portal[lblmenuar].width * portal[lblmenuar].visible
        reserve += defwidth + gap
      elseif (portal[menu1].visible <> 0) then
        reserve = portal[lblmenu1].width * portal[lblmenu1].visible
        reserve += defwidth + gap
        reserve += portal[lblmenu2].width * portal[menu2].visible
        reserve += (defwidth + gap) * portal[menu2].visible
        endif

      ~position the name on the left, reserving our minimum space for any portals
      var x as number
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,edge - portal[name].left - reserve)
      x = portal[name].right + gap

	  ~if we're a custom item, show the edit portal over the name
	  if (tagis[Helper.CustomItem] <> 0) then
		portal[username].left = portal[name].left
		portal[username].width = minimum(180,edge - portal[name].left - reserve)
		portal[name].visible = 0
	  else
		portal[username].visible = 0
	  endif
	  
      ~setup the maximum width for our some portals, regardless of space available
      var maxwidth as number
	  maxwidth = 190
	  if (tagis[User.NeedDomain] <> 0) then
		maxwidth -= 90
	  endif
      
	  ~if we have a checkbox, size and position it appropriately
      if (portal[checkbox].visible <> 0) then
        portal[checkbox].left = x
		x = portal[checkbox].right + 4
      ~if we have a thing-based menu and an array-based menu, size and position them appropriately
      elseif (portal[menu1].visible + portal[menuarray].visible > 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
		x = portal[menuarray].right + 4		
      ~if we have an array-based menu, size and position it appropriately
      elseif (portal[menuarray].visible <> 0) then
        if (portal[lblmenuar].visible <> 0) then
          portal[lblmenuar].left = x
          x = portal[lblmenuar].right + 4
          endif
        portal[menuarray].left = x
        portal[menuarray].width = maxwidth
		x = portal[menuarray].right + 4
      ~if we have one thing-based menu, size and position it appropriately
      elseif (portal[menu1].visible + portal[menu2].visible = 1) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        portal[menu1].width = minimum(edge - portal[menu1].left,maxwidth)
		x = portal[menu1].right + 4
      ~if we have two thing-based menus, size and position them appropriately
      elseif (portal[menu1].visible <> 0) then
        if (portal[lblmenu1].visible <> 0) then
          portal[lblmenu1].left = x
          x = portal[lblmenu1].right + 4
          endif
        portal[menu1].left = x
        var extra as number
        extra = (portal[lblmenu2].width + 4) * portal[lblmenu2].visible
        var actual as number
        actual = (edge - portal[menu1].left - extra - gap) / 2
        portal[menu1].width = minimum(actual,maxwidth)
        portal[menu2].width = portal[menu1].width
        x = portal[menu1].right + gap
        if (portal[lblmenu2].visible <> 0) then
          portal[lblmenu2].left = x
          x = portal[lblmenu2].right + 4
          endif
        portal[menu2].left = x
		x = portal[menu2].right + 4
        endif

	  ~if we don't need a domain, hide it
      if (tagis[User.NeedDomain] = 0) then
        portal[domain].visible = 0	
	        ~otherwise, position the domain portals next to the TL
			~RDS altered to make the name portal invivisible and shift the domain to the name position 
			~    to use it as a custom Skill name when a Custom Skill is chosen
      else
		portal[domain].left = x 
		portal[domain].width = minimum(190,portal[info].left - portal[domain].left - 5)		 
	  endif			
		
      ~if a menu is visible, make sure it has a selection
      if (portal[menu1].visible <> 0) then
        if (field[usrChosen1].ischosen = 0) then
          perform portal[menu1].setstyle[menuError]
          endif
        endif
      if (portal[menu2].visible <> 0) then
        if (field[usrChosen2].ischosen = 0) then
          perform portal[menu2].setstyle[menuError]
          endif
        endif
      if (portal[menuarray].visible <> 0) then
        if (field[usrSelect].isempty <> 0) then
          perform portal[menuarray].setstyle[menuError]
          endif
        endif
      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>


  <!-- aoe layout
        
  -->
  <layout
    id="powermod">
    <portalref portal="bonExtra" taborder="20"/>
    <portalref portal="limLimit" taborder="30"/>
    <templateref template="piTitle" thing="PowerInfo" taborder="10"/>
    <templateref template="optOptions" thing="PowerInfo" taborder="40"/>

    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
      ~freeze our table in advancement mode to disable adding new choices
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[bonExtra].freeze = 1
        portal[limLimit].freeze = 1
        endif

	
      ~position and size the table to span the full layout; it will only use the
      ~vertical space that it actually needs
      
	  template[piTitle].top = 0
	  template[piTitle].left = 0
	  template[piTitle].width = 400
	  
      portal[bonExtra].width = 380
      portal[bonExtra].height = 500
	  portal[bonExtra].left = 0
      portal[bonExtra].top = template[piTitle].bottom 


      ~position and size the table to span the full layout; it will only use the
      ~vertical space that it actually needs
      portal[limLimit].left = 0
      portal[limLimit].top = portal[bonExtra].bottom + 20
      portal[limLimit].width = portal[bonExtra].width
      portal[limLimit].height = 500
	  
	  template[optOptions].top = portal[bonExtra].top 
	  template[optOptions].left = portal[limLimit].right + 5
	  template[optOptions].width = 250
      ]]></position>

    </layout>


  <!-- power form
        This is the "config" form shown to configure a new character within Hero
        Lab.

        NOTE! The unique id of this form is specially recognized by Hero Lab as
        the form to be used for character configuration. A form with this id is
        required within your data files.
  -->
  <form
    id="power"
    name="Power Modifier"
	entity="entMod">
    <layoutref layout="powermod"/>

    <position><![CDATA[
      ~render the layout to generate its dimensions
      perform layout[powermod].render

      ~set the width and height of the form to the dimensions of the layout
      width = 640
      height = 480
      ]]></position>

    </form>


  </document>
